var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "./component2d"], function (require, exports, component2d_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component2 = /** @class */ (function (_super) {
        __extends(Component2, _super);
        function Component2(id) {
            var _this = _super.call(this, id) || this;
            // canvas的属性
            _this.cWidth = 0;
            _this.cHeight = 0;
            _this.cMargin = 0;
            _this.cSpace = 0;
            // 原点的坐标
            _this.originX = 0;
            _this.originY = 0;
            // 柱状图属性
            _this.tobalDots = 0; // 柱状图的y轴为几等分
            _this.dotSpace = 0; // y轴每个格子的宽度
            _this.maxValue = 0; // x轴的最大值
            _this.totalXNumber = 0; // 折线图的x轴为几等分
            _this.dataArr = null;
            // 设置canvas的高度
            _this.node.height = 600;
            _this.addTimeSlice(0, 6, "easeOutCubic");
            return _this;
        }
        Component2.prototype.setTarget = function (arg) {
            // throw new Error("Method not implemented.");
            if (arg === void 0) { arg = null; }
            if (!this.isPlaying()) {
                this.start();
            }
        };
        Component2.prototype.update = function () {
            // throw new Error("Method not implemented.");
            this.dataArr = [
                {
                    name: '初试',
                    number: 6
                },
                {
                    name: '调试',
                    number: 2
                },
                {
                    name: '故障',
                    number: 10
                },
                {
                    name: '保修',
                    number: 3
                },
                {
                    name: '维修',
                    number: 7
                }
            ];
            if (this.dataArr) {
                for (var index in this.dataArr) {
                    this.dataArr[index].number = this.dataArr[index].number * this.getTime(0);
                }
            }
            // console.log(this.dataArr)
        };
        Component2.prototype.render = function () {
            if (this.dataArr) {
                this.initData(this.dataArr);
            }
            // this.drawLine()
        };
        Component2.prototype.initData = function (dataArr) {
            this.canvas = this.node;
            this.canvas.style.background = '#2D3343';
            this.ctx = this.context;
            this.cMargin = 60;
            this.cSpace = 80;
            this.cWidth = this.width - this.cMargin;
            this.cHeight = this.height - this.cMargin - 500;
            this.originX = this.cSpace;
            this.originY = this.cMargin;
            this.tobalDots = dataArr.length;
            for (var i = 0; i < dataArr.length; i++) {
                var dotVal = dataArr[i].number;
                if (dotVal > this.maxValue) {
                    this.maxValue = dotVal;
                }
            }
            this.maxValue += 1;
            this.totalXNumber = 6;
            this.dotSpace = (this.originX + this.cWidth - this.originY) / this.totalXNumber;
            this.dotSpace = Number(this.dotSpace.toFixed(0));
            this.drawingAxes();
            this.drawMarkers();
            this.drawLineAnimate('#2C9BFE', 'number', dataArr);
        };
        //绘制坐标轴
        Component2.prototype.drawingAxes = function () {
            // 设置样式
            this.ctx.lineWidth = 2;
            this.ctx.strokeStyle = '#777F92';
            // 绘制X轴
            this.drawLine(this.originX, this.originY, this.originX + this.cWidth - this.originY, this.originY);
            // 绘制Y轴
            // this.drawLine(this.originX, this.originY, this.originX, this.cMargin)
            // this.drawLine(this.originX, this.originY, this.originX , this.originY+300);
        };
        Component2.prototype.drawMarkers = function () {
            // 设置样式
            this.ctx.font = '14px Arial';
            this.ctx.fillStyle = '#a5aabd';
            this.ctx.strokeStyle = '#a5aabd';
            // 绘制y轴上的横线
            // yInterval: y轴上横线的间隔
            // 设置y轴文本的对齐方式
            this.ctx.textAlign = 'right';
            // 绘制线段及添加文本
            for (var i = 0; i < this.dataArr.length; i++) {
                var markerVal = this.dataArr[i].name;
                // 设置文字与y轴上横线的位置
                var xMarker = this.originX - 20; // 减去5表示相对于x往左移动5个像素
                var yMarker = this.originX + this.cHeight * (i);
                this.ctx.fillText(markerVal, xMarker, yMarker + 10, this.cSpace);
            }
            // 绘制x轴的竖线
            this.ctx.textAlign = 'center';
            // 设置样式
            this.ctx.strokeStyle = '#777F92';
            for (var i = 0; i < this.totalXNumber; i++) {
                // 每条竖线下面显示的文字
                var text = i * 2;
                var xMarker = this.originX + this.dotSpace * i;
                var yMarker = this.originY - 30;
                this.drawLine(xMarker, this.originY, xMarker, this.cHeight + 10);
                // 绘制文字
                this.ctx.fillText(text.toString(), xMarker, yMarker, this.cSpace);
            }
        };
        Component2.prototype.drawLineAnimate = function (color, type, dataArr) {
            // console.log(this.dataArr)
            this.ctx.strokeStyle = color;
            // 绘制柱子
            this.ctx.beginPath();
            for (var i = 0; i < dataArr.length; i++) {
                // 取出数据中的值
                var dotVal = dataArr[i].number;
                var x = (this.dotSpace * (dotVal / 2));
                var y = this.cHeight / 2;
                this.ctx.fillRect(this.originX, this.originY + this.cHeight * (i) + y / 2 + 5, x, y);
            }
            this.ctx.stroke();
            this.ctx.closePath();
        };
        Component2.prototype.drawLine = function (x1, y1, x2, y2) {
            this.ctx.beginPath();
            this.ctx.moveTo(x1, y1);
            this.ctx.lineTo(x2, y2);
            this.ctx.stroke();
            this.ctx.closePath();
        };
        return Component2;
    }(component2d_1.Component2D));
    exports.Component2 = Component2;
});
