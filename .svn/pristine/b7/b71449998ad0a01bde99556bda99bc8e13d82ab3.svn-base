define(["require", "exports", "./component2d"], function (require, exports, component2d_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Component4 extends component2d_1.Component2D {
        /**
         * 构造函数
         * @param id canvas标签的id
         */
        constructor(id) {
            super(id);
            // canvas的属性
            this.cWidth = 0; // 折线图的宽度
            this.cHeight = 0; // 折线图的高度
            this.cMargin = 0;
            this.cSpace = 0;
            // 原点的坐标
            this.originX = 0;
            this.originY = 0;
            // 折线图属性
            this.tobalDots = 0; // 折线图的x轴为几等分
            this.dotSpace = 0; // x轴每个格子的宽度
            this.maxValue = 0; // y轴的最大值
            this.totalYNumber = 0; // 折线图的y轴为几等分
            // 运动相关
            this.ctr = 0; // 计数器，当等于numctr的时候就不在绘制了
            this.numctr = 0; // numctr * speed 等于绘制所花费的时间
            this.speed = 0; // 每个多少ms绘制一次视图
            // 颜色数组
            this.colorList = ['#2C9BFE', '#5A598E'];
            // json
            this.json = [
                [
                    {
                        time: '08:00',
                        number: 492
                    },
                    {
                        time: '09:00',
                        number: 1050
                    },
                    {
                        time: '10:00',
                        number: 800
                    },
                    {
                        time: '11:00',
                        number: 879
                    },
                    {
                        time: '12:00',
                        number: 700
                    },
                    {
                        time: '13:00',
                        number: 777
                    },
                    {
                        time: '14:00',
                        number: 1000
                    },
                    {
                        time: '15:00',
                        number: 1000
                    },
                    {
                        time: '16:00',
                        number: 650
                    }
                ],
                [
                    {
                        time: '08:00',
                        number: 253
                    },
                    {
                        time: '09:00',
                        number: 120
                    },
                    {
                        time: '10:00',
                        number: 604
                    },
                    {
                        time: '11:00',
                        number: 1300
                    },
                    {
                        time: '12:00',
                        number: 505
                    },
                    {
                        time: '13:00',
                        number: 999
                    },
                    {
                        time: '14:00',
                        number: 777
                    },
                    {
                        time: '15:00',
                        number: 305
                    },
                    {
                        time: '16:00',
                        number: 100
                    }
                ]
            ];
            // 设置canvas外层div的高度
            this.node.height = 400;
            // y轴的最大值maxValue等于数据中的最大值
            this.maxValue = this.getMaxNumByY(this.json);
            this.initData(this.json);
            // this.addTimeSlice(0, 2, 'quinticOut')
        }
        /**
         * 返回输入的数组中的最大值（相当于求y轴的最大值）
         * @param data JSON数据
         */
        getMaxNumByY(data) {
            let maxNum = 0;
            for (let i = 0; i < data.length; i++) {
                for (let j = 0; j < data[i].length; j++) {
                    if (data[i][j].number > maxNum) {
                        maxNum = data[i][j].number;
                    }
                }
            }
            return maxNum;
        }
        /**
         * 返回x轴几等分的值（相当于求数据中数组的length）
         * @param data JSON数据
         */
        getMaxNumByX(data) {
            let maxX = 0;
            for (let i = 0; i < data.length; i++) {
                maxX = data[i].length;
            }
            return maxX;
        }
        /**
         * 初始化
         * @param dataArr 模拟的JSON数据
         */
        initData(dataArr) {
            this.canvas = this.node;
            this.canvas.style.background = '#2D3343'; // 设置背景色
            this.ctx = this.context;
            this.cMargin = 70;
            this.cSpace = 80;
            // this.cWidth = this.width - this.cMargin - this.cSpace;
            this.cWidth = this.width - this.cMargin;
            // this.cHeight = this.height - this.cMargin - this.cSpace
            this.cHeight = this.height - this.cMargin - 200;
            // this.originX = this.cMargin + this.cSpace
            this.originX = this.cSpace;
            this.originY = this.cMargin + this.cHeight;
            // 求出折线图信息
            // totalDots: x轴为几等分
            this.tobalDots = this.getMaxNumByX(dataArr);
            // dotSpace: x轴每个格子的宽度
            this.dotSpace = this.cWidth / this.tobalDots;
            this.dotSpace = Number(this.dotSpace.toFixed(0));
            // 将y轴的最大值加上100(这样就不会有坐标点在最上面)赋给maxValue
            this.maxValue += 200;
            // 将y几等分
            this.totalYNumber = 6;
            // 运动相关
            this.ctr = 1;
            this.numctr = 200;
            this.speed = 6;
            // 当只绘制1像素的线的时候，坐标点需要偏移，这样才能画出1像素实线
            this.ctx.translate(0.5, 0.5);
            // 绘制坐标轴
            this.drawingAxes();
            // 绘制标记
            this.drawMarkers();
            // 绘制折线与动画
            this.drawLineAnimate(this.json);
            // 绘制折线图下方的图表
            // this.drawChart()
        }
        /**
         * 绘制坐标轴
         */
        drawingAxes() {
            this.ctx.clearRect(this.originX, this.originY + 1, this.cWidth, 2);
            // 设置样式
            this.ctx.lineWidth = 2;
            this.ctx.strokeStyle = '#777F92';
            // 绘制X轴
            // this.drawLine(this.originX, this.originY, this.originX + this.cWidth, this.originY)
            this.drawLine(this.originX, this.originY + 2, this.originX + this.cWidth - this.dotSpace - 3, this.originY + 2);
            // 绘制Y轴
            // this.drawLine(this.originX, this.originY, this.originX, this.cMargin)
        }
        /**
         * 绘制标记，x轴和y轴上的线段和文字
         */
        drawMarkers() {
            // 先清空y轴和x轴旁边的文字
            this.ctx.clearRect(0, this.cMargin - 20, this.cSpace - 5, this.cHeight + 15);
            this.ctx.clearRect(0, this.cHeight + this.cMargin + 10, this.cSpace + this.cWidth, 30);
            // 设置样式
            this.ctx.font = '14px Arial';
            this.ctx.fillStyle = '#a5aabd';
            this.ctx.strokeStyle = '#a5aabd';
            // 绘制y轴上的横线
            // yInterval: y轴上横线的间隔
            let yInterval = this.maxValue / this.totalYNumber;
            yInterval = Number(yInterval.toFixed(0));
            // 设置y轴文本的对齐方式
            this.ctx.textAlign = 'right';
            // 绘制线段及添加文本
            for (let i = 0; i <= this.totalYNumber; i++) {
                let markerVal = i * yInterval;
                // 设置文字与y轴上横线的位置
                let xMarker = this.originX - 10; // 减去5表示相对于x往左移动5个像素
                let yMarker = Number((this.cHeight * (1 - markerVal / this.maxValue) + this.cMargin).toFixed(0));
                // 绘制y轴上的横线, 与x轴重叠的横线可以不用画
                if (i > 0) {
                    // this.drawLine(this.originX, yMarker, this.originX + this.cWidth, yMarker);
                }
                // 绘制文本
                this.ctx.fillText(markerVal.toString(), xMarker, yMarker + 3, this.cSpace);
            }
            // 清除x轴的竖线
            this.ctx.clearRect(this.originX, this.originY + 3, this.cWidth, 5);
            // 绘制x轴的竖线
            this.ctx.textAlign = 'center';
            // 设置样式
            this.ctx.strokeStyle = '#777F92';
            // totalDots: 将x轴分为几等分; dotSpace: x轴每个格子的宽度
            for (let i = 0; i < this.tobalDots; i++) {
                // 每条竖线下面显示的文字
                let text = this.json[0][i].time;
                let xMarker = this.originX + this.dotSpace * i;
                let yMarker = this.originY + 30;
                // 绘制竖线
                this.ctx.strokeStyle = '#ffffff';
                if (i != 0 && i < this.tobalDots - 1) {
                    this.drawLine(xMarker, this.originY + 2, xMarker, this.cMargin + this.cHeight + 7);
                }
                // 绘制文字
                this.ctx.fillText(text, xMarker, yMarker, this.cSpace);
            }
        }
        /**
         * 绘制折线和动画
         * @param dataArr json数据
         */
        drawLineAnimate(dataArr) {
            // dataArr中有多个数组，每个数组代表了一条折线
            for (let i = 0; i < dataArr.length; i++) {
                this.ctx.strokeStyle = this.colorList[i];
                // 绘制折线
                this.ctx.beginPath();
                for (let j = 0; j < this.tobalDots; j++) {
                    let dotVal = dataArr[i][j].number;
                    let barH = Number((this.cHeight * dotVal / this.maxValue * this.ctr / this.numctr).toFixed(0));
                    let x = this.originX + this.dotSpace * j;
                    let y = this.originY - barH;
                    if (j == 0) {
                        this.ctx.moveTo(x, y);
                    }
                    else {
                        this.ctx.lineTo(x, y);
                    }
                }
                this.ctx.stroke();
                //背景
                this.ctx.lineTo(this.originX + this.dotSpace * (this.tobalDots - 1), this.originY);
                this.ctx.lineTo(this.originX, this.originY);
                //背景渐变色
                //柱状图渐变色
                var gradient = this.ctx.createLinearGradient(0, 0, 0, 200);
                gradient.addColorStop(0, 'rgba(88, 105, 151,0.6)');
                gradient.addColorStop(1, 'rgba(88, 105, 151,0)');
                this.ctx.fillStyle = gradient;
                this.ctx.fill();
                this.ctx.closePath();
                this.ctx.fillStyle = "#566a80";
                // 绘制折线上的点
                for (let j = 0; j < this.tobalDots; j++) {
                    let dotVal = dataArr[i][j].number;
                    let barH = Number((this.cHeight * dotVal / this.maxValue * this.ctr / this.numctr).toFixed(0));
                    let x = this.originX + this.dotSpace * j;
                    let y = this.originY - barH;
                    // 绘制点
                    this.drawArc(x, y, this.colorList[i]);
                    // 绘制文字
                    this.ctx.fillText((dotVal * this.ctr / this.numctr).toFixed(0), x + 15, y - 8);
                }
            }
            if (this.ctr < this.numctr) {
                this.ctr++;
                setTimeout(() => {
                    this.ctx.clearRect(0, 0, this.width, this.height);
                    this.drawingAxes();
                    this.drawLineAnimate(this.json);
                    this.drawMarkers();
                    this.drwaInstructions();
                }, this.speed);
            }
        }
        /**
         * 绘制折线但不需要动画，当接口有数据返回时调用这个方法
         * @param dataArr json数据
         */
        drawLineNotAnimate(dataArr) {
            // 先清空已有的折线
            this.ctx.clearRect(this.originX - 2, this.cMargin - 10, this.cWidth, this.cHeight + 10);
            // dataArr中有多个数组，每个数组代表了一条折线
            for (let i = 0; i < dataArr.length; i++) {
                this.ctx.strokeStyle = this.colorList[i];
                // 绘制折线
                this.ctx.beginPath();
                for (let j = 0; j < this.tobalDots; j++) {
                    let dotVal = dataArr[i][j].number;
                    // let barH: number = Number((this.cHeight * dotVal / this.maxValue * this.ctr / this.numctr).toFixed(0));
                    let x = this.originX + this.dotSpace * j;
                    // let y = this.originY - (this.cHeight - (dotVal / this.maxValue) * this.cHeight) - this.cMargin
                    let y = (1 - dotVal / this.maxValue) * this.cHeight + this.cMargin;
                    if (j == 0) {
                        this.ctx.moveTo(x, y);
                    }
                    else {
                        this.ctx.lineTo(x, y);
                    }
                }
                this.ctx.stroke();
                //背景
                this.ctx.lineTo(this.originX + this.dotSpace * (this.tobalDots - 1), this.originY);
                this.ctx.lineTo(this.originX, this.originY);
                //背景渐变色
                //柱状图渐变色
                var gradient = this.ctx.createLinearGradient(0, 0, 0, 200);
                gradient.addColorStop(0, 'rgba(88, 105, 151,0.6)');
                gradient.addColorStop(1, 'rgba(88, 105, 151,0)');
                this.ctx.fillStyle = gradient;
                this.ctx.fill();
                this.ctx.closePath();
                this.ctx.fillStyle = "#566a80";
                // 绘制折线上的点
                for (let j = 0; j < this.tobalDots; j++) {
                    let dotVal = dataArr[i][j].number;
                    // let barH: number = Number((this.cHeight * dotVal / this.maxValue * this.ctr / this.numctr).toFixed(0));
                    let x = this.originX + this.dotSpace * j;
                    // let y = this.originY - (this.cHeight - (dotVal / this.maxValue) * this.cHeight) - this.cMargin
                    let y = (1 - dotVal / this.maxValue) * this.cHeight + this.cMargin;
                    // 绘制点
                    this.drawArc(x, y, this.colorList[i]);
                    // 绘制文字
                    this.ctx.fillText((dotVal * this.ctr / this.numctr).toFixed(0), x + 15, y - 8);
                }
            }
        }
        /**
         * 绘制点
         * @param x 要绘制的点的x坐标
         * @param y 要绘制的点的y坐标
         */
        drawArc(x, y, color) {
            this.ctx.beginPath();
            this.ctx.fillStyle = color;
            this.ctx.arc(x, y, 3, 0, Math.PI * 2);
            this.ctx.fill();
            this.ctx.closePath();
        }
        /**
         * 绘制图表的说明内容
         */
        drwaInstructions() {
            // 绘制标识
            // 1. 绘制一个圆
            this.ctx.beginPath();
            this.ctx.fillStyle = '#54C37A';
            this.ctx.arc(60, 33, 15, 0, Math.PI * 2);
            this.ctx.fill();
            this.ctx.closePath();
            // 2. 绘制文字
            this.ctx.fillStyle = '#C8CDD6';
            this.ctx.font = '18px Arial';
            this.ctx.fillText('3', 60, 40);
            // 绘制文字
            this.ctx.fillStyle = '#C8CDD6';
            this.ctx.font = '14px Arial';
            this.ctx.fillText('正常企业', 600, 40);
            this.ctx.fillText('异常企业', 700, 40);
            // 绘制小方块
            this.ctx.fillStyle = '#2C9BFE';
            this.ctx.fillRect(550, 30, 10, 10);
            this.ctx.fillStyle = '#5A598E';
            this.ctx.fillRect(650, 30, 10, 10);
        }
        /**
         * 绘制一条从点(x, y)到点(X, Y)的线段
         * @param x ctx.moveTo(x, y)方法的第一个参数
         * @param y ctx.moveTo(x, y)方法的第二个参数
         * @param X ctx.lineTo(x, y)方法的第一个参数
         * @param Y ctx.lineTo(x, y)方法的第二个参数
         */
        drawLine(x, y, X, Y) {
            this.ctx.beginPath();
            this.ctx.moveTo(x, y);
            this.ctx.lineTo(X, Y);
            this.ctx.stroke();
            this.ctx.closePath();
        }
        setTarget(arg) {
            // 假如这里从接口获取数据后将值赋给dataArr
            // console.log('调用我了')
            if (arg !== undefined) {
                // console.log(arg);
                this.json = arg;
                // y轴的最大值maxValue等于数据中的最大值
                this.maxValue = this.getMaxNumByY(this.json);
                this.maxValue += 300;
                this.drawLineNotAnimate(this.json);
                this.drawingAxes();
                this.drawMarkers();
            }
        }
        update() {
            // throw new Error("Method not implemented.");
        }
        render() {
            // throw new Error("Method not implemented.");
        }
    }
    exports.Component4 = Component4;
});
