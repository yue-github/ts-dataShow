var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
define(["require", "exports", "./component2d"], function (require, exports, component2d_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component6 = /** @class */ (function (_super) {
        __extends(Component6, _super);
        function Component6(id) {
            var _this = _super.call(this, id) || this;
            _this.canvas6Json = [];
            _this.drawCircleOutEndDeg = 0;
            _this.circleOutWhite = 'white';
            // 设置光圈内部颜色变化
            _this.changeCircleOutInColor = true;
            _this.firstCount = 0;
            _this.countTime = 0;
            _this.lastCanvas6Json = [];
            _this.addTimeSlice(0, 2, "exponentialInOut");
            _this.addTimeSlice(1, 3, "bounceIn");
            _this.addTimeSlice(2, 3, "quadraticInOut");
            _this.addTimeSlice(2.5, 3, "linear");
            _this.addTimeSlice(0, 6, "elasticOut");
            /**
             * canvas6节点
             */
            var node = _this.node;
            var screenX = 0;
            // 获取设备宽高
            screenX = window.screen.width;
            node.width = 1366 / 1.7075; //500
            node.height = 0.75 * node.width; //400
            node.style.background = "rgb(45, 51, 67)";
            node.style.position = "relative";
            // node.style['float'] = 'right';
            // 设置圆半径
            _this.circleR = 120;
            // 等比缩放
            node.style.transform = "scale(" + _this.node.width / 800 + ", " + _this.node.height / 600 + ")";
            _this.context.scale(0.6, 0.6);
            /**
             * 静态初始化
             */
            _this.staticInit();
            return _this;
        }
        /**
         *
         * @param arg 初始数据
         */
        Component6.prototype.setTarget = function (arg) {
            var _this = this;
            if (arg === void 0) { arg = null; }
            this.countTime++;
            var json = [
                {
                    id: 0,
                    count: 150,
                    color: '#28FF28',
                    dyLineX: 0,
                    dyLineY: 0,
                    countX: -340,
                    countY: -150,
                    name: 'UV',
                    percent: 0
                },
                {
                    id: 1,
                    count: 23,
                    color: 'red',
                    dyLineX: 0,
                    dyLineY: 0,
                    countX: 230,
                    countY: -150,
                    name: '活性炭',
                    percent: 0
                },
                {
                    id: 2,
                    count: 45,
                    color: 'yellow',
                    dyLineX: 0,
                    dyLineY: 0,
                    countX: -340,
                    countY: 250,
                    name: 'RCO',
                    percent: 0
                },
                {
                    id: 3,
                    count: 32,
                    color: 'pink',
                    dyLineX: 0,
                    dyLineY: 0,
                    countX: 230,
                    countY: 250,
                    name: 'RTO',
                    percent: 0
                }
            ];
            arg = json;
            // 深度克隆操作
            if (arg) {
                var arr = [];
                for (var _i = 0, arg_1 = arg; _i < arg_1.length; _i++) {
                    var obj = arg_1[_i];
                    var cloneObj = __rest(obj, []);
                    arr.push(cloneObj);
                }
                this.canvas6JsonClone = arr;
            }
            // 实现差集
            var yes = arg.filter(function (res) {
                var boo = true;
                _this.lastCanvas6Json.map(function (item) {
                    // res.id == item.id 避免变了与其它对象里的数偶然碰巧一样
                    if (res.count == item.count && res.id == item.id) {
                        boo = false;
                    }
                });
                return boo;
            });
            // 深度克隆操作->对上次数据进行记录
            if (arg) {
                var arr1 = [];
                for (var _a = 0, arg_2 = arg; _a < arg_2.length; _a++) {
                    var obj = arg_2[_a];
                    var cloneObj = __rest(obj, []);
                    arr1.push(cloneObj);
                }
                this.lastCanvas6Json = arr1;
            }
            this.canvas6Json = arg;
            if (!this.isPlaying() && yes.length != 0) {
                this.start();
            }
        };
        Component6.prototype.update = function () {
            var _this = this;
            // 动态改变企业家数的值
            if (this.canvas6Json) {
                for (var index in this.canvas6Json) {
                    this.canvas6Json[index].count = this.canvas6JsonClone[index].count * this.getTime(parseInt(index));
                }
            }
            // 外圈闪烁效果
            if (this.drawCircleOutEndDeg = 365 * Math.PI / 180) {
                this.changeCircleOutInColor = !this.changeCircleOutInColor;
            }
            this.changeCircleOutInColor ?
                this.circleOutWhite = 'blue' :
                this.circleOutWhite = 'white';
            // 更新扇形外弧的结束角
            this.drawCircleOutEndDeg = 365 * Math.PI / 180 * this.getTime(4);
            // 动线跟踪
            if (this.canvas6Json) {
                var allCount_1 = 0;
                this.canvas6Json.forEach(function (e, i) {
                    allCount_1 += e.count;
                });
                this.canvas6Json.forEach(function (e, i) {
                    var hypotenuse = _this.circleR / 2, angle = Math.PI / 180;
                    // 更新百分比数据
                    _this.canvas6Json[i].percent = _this.toPercent(_this.getTime(4) * (_this.canvas6Json[i].count / allCount_1));
                    if (i == 0) {
                        e.dyLineX = Math.cos(90 * Math.PI + _this.drawHandle(i) / 2) * hypotenuse;
                        e.dyLineY = Math.sin(90 * Math.PI + _this.drawHandle(i) / 2) * hypotenuse;
                    }
                    else {
                        // 计算动点的坐标
                        angle = 90 * Math.PI - (_this.drawHandle(i - 1) - _this.drawHandle(i)) / 2 + _this.drawHandle(i - 1);
                        _this.canvas6Json[i].dyLineX = Math.cos(angle) * hypotenuse;
                        _this.canvas6Json[i].dyLineY = Math.sin(angle) * hypotenuse;
                    }
                });
            }
        };
        /**
         * 动态渲染
         */
        Component6.prototype.render = function () {
            var _this = this;
            if (this.clearAll()) {
                this.drawSector();
                this.drawCircleOut();
                // 动态数据渲染
                if (this.canvas6Json) {
                    this.canvas6Json.forEach(function (e) {
                        _this.drawPercentage(e.countX, e.countY, e.percent, e.name, Math.ceil(e.count), e.dyLineX, e.dyLineY, e.color);
                    });
                }
            }
        };
        /**
         * 渲染静态
         */
        Component6.prototype.staticInit = function () {
            var ctx = this.context;
            if (ctx) {
                // 擦除
                ctx.save();
                ctx.beginPath();
                ctx.arc(40, 40, 20, 0, 2 * Math.PI);
                ctx.fillStyle = "rgb(84, 195, 122)";
                ctx.fill();
                ctx.closePath();
                ctx.beginPath();
                ctx.textAlign = "center";
                ctx.font = "25px Arial";
                ctx.fillStyle = '#fff';
                ctx.fillText('6', 40, 50);
                ctx.closePath();
                ctx.beginPath();
                ctx.font = "25px Arial";
                ctx.fillStyle = 'rgb(200, 205, 214)';
                ctx.fillText('工艺占比', 115, 50);
                ctx.closePath();
                // 改变图原点参照位置
                ctx.translate(this.node.width / 1.75, this.node.height / 2);
            }
        };
        /**
         * 整理圆的终点角度
         */
        Component6.prototype.drawHandle = function (num) {
            var countAll = 0;
            this.canvas6Json.forEach(function (ele, index) {
                countAll += ele.count;
            });
            var count = 0;
            this.canvas6Json.forEach(function (element, index) {
                if (index <= num) {
                    count += element.count;
                }
            });
            return (count / countAll * 360) * Math.PI / 180;
        };
        /**
         * 画主圆
         */
        Component6.prototype.drawSector = function () {
            var _this = this;
            var ctx = this.context;
            // 静态模拟画圆
            if (ctx && this.canvas6Json) {
                ctx.save();
                this.canvas6Json.forEach(function (ele, index) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(0, 0);
                    if (index == 0) {
                        ctx.arc(0, 0, _this.circleR, 0, _this.drawHandle(index));
                    }
                    else {
                        ctx.arc(0, 0, _this.circleR, _this.drawHandle(index - 1), _this.drawHandle(index));
                    }
                    ctx.fillStyle = ele.color;
                    ctx.fill();
                    ctx.closePath();
                });
            }
        };
        /**
         * 清除画布
         */
        Component6.prototype.drawPercentage = function (x, y, e, name, count, dx, dy, fontColor) {
            var ctx = this.context;
            if (ctx) {
                ctx.beginPath();
                ctx.lineWidth = 1;
                ctx.font = "35px Arial";
                ctx.textAlign = 'left';
                ctx.strokeStyle = fontColor;
                ctx.strokeText(e + '', x, y);
                ctx.closePath();
                ctx.beginPath();
                if (y < 0) {
                    ctx.moveTo(x + 50, y + 10);
                    ctx.lineTo(x + 50, y + 100);
                }
                else {
                    ctx.moveTo(x + 50, y - 40);
                    ctx.lineTo(x + 50, y - 120);
                }
                ctx.lineTo(dx, dy);
                ctx.strokeStyle = 'rgb(44, 155, 254)';
                ctx.stroke();
                ctx.closePath();
                ctx.beginPath();
                ctx.font = "25px Arial";
                ctx.textAlign = 'right';
                ctx.strokeStyle = 'white';
                if (y < 0) {
                    ctx.strokeText(name, x + 30, y + 60);
                    ctx.strokeText(count + '', x + 130, y + 60);
                }
                else {
                    ctx.strokeText(name, x + 30, y - 60);
                    ctx.strokeText(count + '', x + 130, y - 60);
                }
                ctx.closePath();
            }
        };
        /**
         * 画图像外围圈
         */
        Component6.prototype.drawCircleOut = function () {
            var ctx = this.context;
            if (ctx && this.circleR) {
                ctx.save();
                //开始新路径
                ctx.beginPath();
                //重新设置画笔
                ctx.lineWidth = 20;
                ctx.strokeStyle = "blue";
                var grd = ctx.createRadialGradient(0, 0, this.circleR, 0, 0, this.circleR + 50);
                grd.addColorStop(0, "red");
                grd.addColorStop(0.5, this.circleOutWhite);
                grd.addColorStop(1, "red");
                // drawCircleOutEndDeg表示画次圆的结束角度
                ctx.arc(0, 0, this.circleR + 25, 0, this.drawCircleOutEndDeg, false);
                ctx.strokeStyle = grd;
                ctx.stroke();
                //封闭新路径
                ctx.closePath();
            }
        };
        Component6.prototype.clearAll = function () {
            var ctx = this.context;
            if (ctx) {
                ctx.beginPath();
                ctx.clearRect(-400, -200, 1000, 1000);
                ctx.closePath();
                return true;
            }
        };
        Component6.prototype.toPercent = function (num) {
            return (num * 100).toFixed(2) + '%';
        };
        return Component6;
    }(component2d_1.Component2D));
    exports.Component6 = Component6;
});
